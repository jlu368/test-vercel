# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Service {
  id: ID!
  title: String
  heroImage: ImageFieldOutput
  content: Service_content_Document
  conditionsLabel: String
  conditions(where: ConditionWhereInput! = {}, orderBy: [ConditionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionWhereUniqueInput): [Condition!]
  conditionsCount(where: ConditionWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Service_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ServiceWhereUniqueInput {
  id: ID
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  conditionsLabel: StringFilter
  conditions: ConditionManyRelationFilter
}

input ConditionManyRelationFilter {
  every: ConditionWhereInput
  some: ConditionWhereInput
  none: ConditionWhereInput
}

input ServiceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  conditionsLabel: OrderDirection
}

input ServiceUpdateInput {
  title: String
  heroImage: ImageFieldInput
  content: JSON
  conditionsLabel: String
  conditions: ConditionRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ConditionRelateToManyForUpdateInput {
  disconnect: [ConditionWhereUniqueInput!]
  set: [ConditionWhereUniqueInput!]
  create: [ConditionCreateInput!]
  connect: [ConditionWhereUniqueInput!]
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  title: String
  heroImage: ImageFieldInput
  content: JSON
  conditionsLabel: String
  conditions: ConditionRelateToManyForCreateInput
}

input ConditionRelateToManyForCreateInput {
  create: [ConditionCreateInput!]
  connect: [ConditionWhereUniqueInput!]
}

type Condition {
  id: ID!
  title: String
  heroImage: ImageFieldOutput
  content: Condition_content_Document
  servicesLabel: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
}

type Condition_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ConditionWhereUniqueInput {
  id: ID
}

input ConditionWhereInput {
  AND: [ConditionWhereInput!]
  OR: [ConditionWhereInput!]
  NOT: [ConditionWhereInput!]
  id: IDFilter
  title: StringFilter
  servicesLabel: StringFilter
  services: ServiceManyRelationFilter
}

input ServiceManyRelationFilter {
  every: ServiceWhereInput
  some: ServiceWhereInput
  none: ServiceWhereInput
}

input ConditionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  servicesLabel: OrderDirection
}

input ConditionUpdateInput {
  title: String
  heroImage: ImageFieldInput
  content: JSON
  servicesLabel: String
  services: ServiceRelateToManyForUpdateInput
}

input ServiceRelateToManyForUpdateInput {
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input ConditionUpdateArgs {
  where: ConditionWhereUniqueInput!
  data: ConditionUpdateInput!
}

input ConditionCreateInput {
  title: String
  heroImage: ImageFieldInput
  content: JSON
  servicesLabel: String
  services: ServiceRelateToManyForCreateInput
}

input ServiceRelateToManyForCreateInput {
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

type ServicesLanding {
  id: ID!
  title: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
}

input ServicesLandingWhereUniqueInput {
  id: ID
}

input ServicesLandingWhereInput {
  AND: [ServicesLandingWhereInput!]
  OR: [ServicesLandingWhereInput!]
  NOT: [ServicesLandingWhereInput!]
  id: IDFilter
  title: StringFilter
  services: ServiceManyRelationFilter
}

input ServicesLandingOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input ServicesLandingUpdateInput {
  title: String
  services: ServiceRelateToManyForUpdateInput
}

input ServicesLandingUpdateArgs {
  where: ServicesLandingWhereUniqueInput!
  data: ServicesLandingUpdateInput!
}

input ServicesLandingCreateInput {
  title: String
  services: ServiceRelateToManyForCreateInput
}

type Post {
  id: ID!
  title: String
  heroImage: ImageFieldOutput
  abstract: Post_abstract_Document
  content: Post_content_Document
  date: CalendarDay
  author: Provider
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_abstract_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  date: CalendarDayNullableFilter
  author: ProviderWhereInput
  tags: TagManyRelationFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  date: OrderDirection
}

input PostUpdateInput {
  title: String
  heroImage: ImageFieldInput
  abstract: JSON
  content: JSON
  date: CalendarDay
  author: ProviderRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ProviderRelateToOneForUpdateInput {
  create: ProviderCreateInput
  connect: ProviderWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  heroImage: ImageFieldInput
  abstract: JSON
  content: JSON
  date: CalendarDay
  author: ProviderRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input ProviderRelateToOneForCreateInput {
  create: ProviderCreateInput
  connect: ProviderWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type BlogLanding {
  id: ID!
  title: String
  heroImage: ImageFieldOutput
}

input BlogLandingWhereUniqueInput {
  id: ID
}

input BlogLandingWhereInput {
  AND: [BlogLandingWhereInput!]
  OR: [BlogLandingWhereInput!]
  NOT: [BlogLandingWhereInput!]
  id: IDFilter
  title: StringFilter
}

input BlogLandingOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input BlogLandingUpdateInput {
  title: String
  heroImage: ImageFieldInput
}

input BlogLandingUpdateArgs {
  where: BlogLandingWhereUniqueInput!
  data: BlogLandingUpdateInput!
}

input BlogLandingCreateInput {
  title: String
  heroImage: ImageFieldInput
}

type Testimonial {
  id: ID!
  name: String
  content: Testimonial_content_Document
  stars: Int
}

type Testimonial_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input TestimonialWhereUniqueInput {
  id: ID
}

input TestimonialWhereInput {
  AND: [TestimonialWhereInput!]
  OR: [TestimonialWhereInput!]
  NOT: [TestimonialWhereInput!]
  id: IDFilter
  name: StringFilter
  stars: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input TestimonialOrderByInput {
  id: OrderDirection
  name: OrderDirection
  stars: OrderDirection
}

input TestimonialUpdateInput {
  name: String
  content: JSON
  stars: Int
}

input TestimonialUpdateArgs {
  where: TestimonialWhereUniqueInput!
  data: TestimonialUpdateInput!
}

input TestimonialCreateInput {
  name: String
  content: JSON
  stars: Int
}

type Home {
  id: ID!
  heroHeadline: String
  heroImage: ImageFieldOutput
  heroCtaLabel: String
  heroCtaLink: String
  welcomeHeader: String
  welcomeDescription: Home_welcomeDescription_Document
  meetTeamHeader: String
  findLocationHeader: String
  findLocationEmbed: String
  providers(where: ProviderWhereInput! = {}, orderBy: [ProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderWhereUniqueInput): [Provider!]
  providersCount(where: ProviderWhereInput! = {}): Int
  servicesHeader: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  testimonialsHeader: String
  testimonials(where: TestimonialWhereInput! = {}, orderBy: [TestimonialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TestimonialWhereUniqueInput): [Testimonial!]
  testimonialsCount(where: TestimonialWhereInput! = {}): Int
}

type Home_welcomeDescription_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input HomeWhereUniqueInput {
  id: ID
}

input HomeWhereInput {
  AND: [HomeWhereInput!]
  OR: [HomeWhereInput!]
  NOT: [HomeWhereInput!]
  id: IDFilter
  heroHeadline: StringFilter
  heroCtaLabel: StringFilter
  heroCtaLink: StringFilter
  welcomeHeader: StringFilter
  meetTeamHeader: StringFilter
  findLocationHeader: StringFilter
  findLocationEmbed: StringFilter
  providers: ProviderManyRelationFilter
  servicesHeader: StringFilter
  services: ServiceManyRelationFilter
  testimonialsHeader: StringFilter
  testimonials: TestimonialManyRelationFilter
}

input ProviderManyRelationFilter {
  every: ProviderWhereInput
  some: ProviderWhereInput
  none: ProviderWhereInput
}

input TestimonialManyRelationFilter {
  every: TestimonialWhereInput
  some: TestimonialWhereInput
  none: TestimonialWhereInput
}

input HomeOrderByInput {
  id: OrderDirection
  heroHeadline: OrderDirection
  heroCtaLabel: OrderDirection
  heroCtaLink: OrderDirection
  welcomeHeader: OrderDirection
  meetTeamHeader: OrderDirection
  findLocationHeader: OrderDirection
  findLocationEmbed: OrderDirection
  servicesHeader: OrderDirection
  testimonialsHeader: OrderDirection
}

input HomeUpdateInput {
  heroHeadline: String
  heroImage: ImageFieldInput
  heroCtaLabel: String
  heroCtaLink: String
  welcomeHeader: String
  welcomeDescription: JSON
  meetTeamHeader: String
  findLocationHeader: String
  findLocationEmbed: String
  providers: ProviderRelateToManyForUpdateInput
  servicesHeader: String
  services: ServiceRelateToManyForUpdateInput
  testimonialsHeader: String
  testimonials: TestimonialRelateToManyForUpdateInput
}

input ProviderRelateToManyForUpdateInput {
  disconnect: [ProviderWhereUniqueInput!]
  set: [ProviderWhereUniqueInput!]
  create: [ProviderCreateInput!]
  connect: [ProviderWhereUniqueInput!]
}

input TestimonialRelateToManyForUpdateInput {
  disconnect: [TestimonialWhereUniqueInput!]
  set: [TestimonialWhereUniqueInput!]
  create: [TestimonialCreateInput!]
  connect: [TestimonialWhereUniqueInput!]
}

input HomeUpdateArgs {
  where: HomeWhereUniqueInput!
  data: HomeUpdateInput!
}

input HomeCreateInput {
  heroHeadline: String
  heroImage: ImageFieldInput
  heroCtaLabel: String
  heroCtaLink: String
  welcomeHeader: String
  welcomeDescription: JSON
  meetTeamHeader: String
  findLocationHeader: String
  findLocationEmbed: String
  providers: ProviderRelateToManyForCreateInput
  servicesHeader: String
  services: ServiceRelateToManyForCreateInput
  testimonialsHeader: String
  testimonials: TestimonialRelateToManyForCreateInput
}

input ProviderRelateToManyForCreateInput {
  create: [ProviderCreateInput!]
  connect: [ProviderWhereUniqueInput!]
}

input TestimonialRelateToManyForCreateInput {
  create: [TestimonialCreateInput!]
  connect: [TestimonialWhereUniqueInput!]
}

type About {
  id: ID!
  title: String
  heroImage: ImageFieldOutput
  content: About_content_Document
}

type About_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AboutWhereUniqueInput {
  id: ID
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
  title: StringFilter
}

input AboutOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input AboutUpdateInput {
  title: String
  heroImage: ImageFieldInput
  content: JSON
}

input AboutUpdateArgs {
  where: AboutWhereUniqueInput!
  data: AboutUpdateInput!
}

input AboutCreateInput {
  title: String
  heroImage: ImageFieldInput
  content: JSON
}

type Location {
  id: ID!
  name: String
  address: String
  phone: String
  fax: String
  latitude: String
  longitude: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
}

input LocationWhereUniqueInput {
  id: ID
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  phone: StringFilter
  fax: StringFilter
  latitude: StringFilter
  longitude: StringFilter
  services: ServiceManyRelationFilter
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  phone: OrderDirection
  fax: OrderDirection
  latitude: OrderDirection
  longitude: OrderDirection
}

input LocationUpdateInput {
  name: String
  address: String
  phone: String
  fax: String
  latitude: String
  longitude: String
  services: ServiceRelateToManyForUpdateInput
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  address: String
  phone: String
  fax: String
  latitude: String
  longitude: String
  services: ServiceRelateToManyForCreateInput
}

type LocationLanding {
  id: ID!
  title: String
  subtitle: String
  findALocationLabel: String
  mapEmbed: String
}

input LocationLandingWhereUniqueInput {
  id: ID
}

input LocationLandingWhereInput {
  AND: [LocationLandingWhereInput!]
  OR: [LocationLandingWhereInput!]
  NOT: [LocationLandingWhereInput!]
  id: IDFilter
  title: StringFilter
  subtitle: StringFilter
  findALocationLabel: StringFilter
  mapEmbed: StringFilter
}

input LocationLandingOrderByInput {
  id: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  findALocationLabel: OrderDirection
  mapEmbed: OrderDirection
}

input LocationLandingUpdateInput {
  title: String
  subtitle: String
  findALocationLabel: String
  mapEmbed: String
}

input LocationLandingUpdateArgs {
  where: LocationLandingWhereUniqueInput!
  data: LocationLandingUpdateInput!
}

input LocationLandingCreateInput {
  title: String
  subtitle: String
  findALocationLabel: String
  mapEmbed: String
}

type Provider {
  id: ID!
  name: String
  email: String
  title: String
  image: ImageFieldOutput
  type: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  description: Provider_description_Document
  homeDescription: Provider_homeDescription_Document
}

type Provider_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Provider_homeDescription_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProviderWhereUniqueInput {
  id: ID
}

input ProviderWhereInput {
  AND: [ProviderWhereInput!]
  OR: [ProviderWhereInput!]
  NOT: [ProviderWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  title: StringFilter
  type: StringNullableFilter
  posts: PostManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input ProviderOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  title: OrderDirection
  type: OrderDirection
}

input ProviderUpdateInput {
  name: String
  email: String
  title: String
  image: ImageFieldInput
  type: String
  posts: PostRelateToManyForUpdateInput
  description: JSON
  homeDescription: JSON
}

input ProviderUpdateArgs {
  where: ProviderWhereUniqueInput!
  data: ProviderUpdateInput!
}

input ProviderCreateInput {
  name: String
  email: String
  title: String
  image: ImageFieldInput
  type: String
  posts: PostRelateToManyForCreateInput
  description: JSON
  homeDescription: JSON
}

type ProvidersLanding {
  id: ID!
  title: String
  dermatologistsLabel: String
  npLabel: String
}

input ProvidersLandingWhereUniqueInput {
  id: ID
}

input ProvidersLandingWhereInput {
  AND: [ProvidersLandingWhereInput!]
  OR: [ProvidersLandingWhereInput!]
  NOT: [ProvidersLandingWhereInput!]
  id: IDFilter
  title: StringFilter
  dermatologistsLabel: StringFilter
  npLabel: StringFilter
}

input ProvidersLandingOrderByInput {
  id: OrderDirection
  title: OrderDirection
  dermatologistsLabel: OrderDirection
  npLabel: OrderDirection
}

input ProvidersLandingUpdateInput {
  title: String
  dermatologistsLabel: String
  npLabel: String
}

input ProvidersLandingUpdateArgs {
  where: ProvidersLandingWhereUniqueInput!
  data: ProvidersLandingUpdateInput!
}

input ProvidersLandingCreateInput {
  title: String
  dermatologistsLabel: String
  npLabel: String
}

type AppointmentsPage {
  id: ID!
  title: String
}

input AppointmentsPageWhereUniqueInput {
  id: ID
}

input AppointmentsPageWhereInput {
  AND: [AppointmentsPageWhereInput!]
  OR: [AppointmentsPageWhereInput!]
  NOT: [AppointmentsPageWhereInput!]
  id: IDFilter
  title: StringFilter
}

input AppointmentsPageOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input AppointmentsPageUpdateInput {
  title: String
}

input AppointmentsPageUpdateArgs {
  where: AppointmentsPageWhereUniqueInput!
  data: AppointmentsPageUpdateInput!
}

input AppointmentsPageCreateInput {
  title: String
}

type GlobalSetting {
  id: ID!
  logo: ImageFieldOutput
  acceptedInsuranceHeader: String
  acceptedInsuranceText: String
  scheduleAnApptHeader: String
  scheduleVisitLabel: String
  scheduleVisitLink: String
  contactUsLabel: String
  phone: String
  fax: String
  instagramLink: String
  linkedInLink: String
  facebookLink: String
}

input GlobalSettingWhereUniqueInput {
  id: ID
}

input GlobalSettingWhereInput {
  AND: [GlobalSettingWhereInput!]
  OR: [GlobalSettingWhereInput!]
  NOT: [GlobalSettingWhereInput!]
  id: IDFilter
  acceptedInsuranceHeader: StringFilter
  acceptedInsuranceText: StringFilter
  scheduleAnApptHeader: StringFilter
  scheduleVisitLabel: StringFilter
  scheduleVisitLink: StringFilter
  contactUsLabel: StringFilter
  phone: StringFilter
  fax: StringFilter
  instagramLink: StringFilter
  linkedInLink: StringFilter
  facebookLink: StringFilter
}

input GlobalSettingOrderByInput {
  id: OrderDirection
  acceptedInsuranceHeader: OrderDirection
  acceptedInsuranceText: OrderDirection
  scheduleAnApptHeader: OrderDirection
  scheduleVisitLabel: OrderDirection
  scheduleVisitLink: OrderDirection
  contactUsLabel: OrderDirection
  phone: OrderDirection
  fax: OrderDirection
  instagramLink: OrderDirection
  linkedInLink: OrderDirection
  facebookLink: OrderDirection
}

input GlobalSettingUpdateInput {
  logo: ImageFieldInput
  acceptedInsuranceHeader: String
  acceptedInsuranceText: String
  scheduleAnApptHeader: String
  scheduleVisitLabel: String
  scheduleVisitLink: String
  contactUsLabel: String
  phone: String
  fax: String
  instagramLink: String
  linkedInLink: String
  facebookLink: String
}

input GlobalSettingUpdateArgs {
  where: GlobalSettingWhereUniqueInput!
  data: GlobalSettingUpdateInput!
}

input GlobalSettingCreateInput {
  logo: ImageFieldInput
  acceptedInsuranceHeader: String
  acceptedInsuranceText: String
  scheduleAnApptHeader: String
  scheduleVisitLabel: String
  scheduleVisitLink: String
  contactUsLabel: String
  phone: String
  fax: String
  instagramLink: String
  linkedInLink: String
  facebookLink: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createCondition(data: ConditionCreateInput!): Condition
  createConditions(data: [ConditionCreateInput!]!): [Condition]
  updateCondition(where: ConditionWhereUniqueInput!, data: ConditionUpdateInput!): Condition
  updateConditions(data: [ConditionUpdateArgs!]!): [Condition]
  deleteCondition(where: ConditionWhereUniqueInput!): Condition
  deleteConditions(where: [ConditionWhereUniqueInput!]!): [Condition]
  createServicesLanding(data: ServicesLandingCreateInput!): ServicesLanding
  createServicesLandings(data: [ServicesLandingCreateInput!]!): [ServicesLanding]
  updateServicesLanding(where: ServicesLandingWhereUniqueInput!, data: ServicesLandingUpdateInput!): ServicesLanding
  updateServicesLandings(data: [ServicesLandingUpdateArgs!]!): [ServicesLanding]
  deleteServicesLanding(where: ServicesLandingWhereUniqueInput!): ServicesLanding
  deleteServicesLandings(where: [ServicesLandingWhereUniqueInput!]!): [ServicesLanding]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createBlogLanding(data: BlogLandingCreateInput!): BlogLanding
  createBlogLandings(data: [BlogLandingCreateInput!]!): [BlogLanding]
  updateBlogLanding(where: BlogLandingWhereUniqueInput!, data: BlogLandingUpdateInput!): BlogLanding
  updateBlogLandings(data: [BlogLandingUpdateArgs!]!): [BlogLanding]
  deleteBlogLanding(where: BlogLandingWhereUniqueInput!): BlogLanding
  deleteBlogLandings(where: [BlogLandingWhereUniqueInput!]!): [BlogLanding]
  createTestimonial(data: TestimonialCreateInput!): Testimonial
  createTestimonials(data: [TestimonialCreateInput!]!): [Testimonial]
  updateTestimonial(where: TestimonialWhereUniqueInput!, data: TestimonialUpdateInput!): Testimonial
  updateTestimonials(data: [TestimonialUpdateArgs!]!): [Testimonial]
  deleteTestimonial(where: TestimonialWhereUniqueInput!): Testimonial
  deleteTestimonials(where: [TestimonialWhereUniqueInput!]!): [Testimonial]
  createHome(data: HomeCreateInput!): Home
  createHomes(data: [HomeCreateInput!]!): [Home]
  updateHome(where: HomeWhereUniqueInput!, data: HomeUpdateInput!): Home
  updateHomes(data: [HomeUpdateArgs!]!): [Home]
  deleteHome(where: HomeWhereUniqueInput!): Home
  deleteHomes(where: [HomeWhereUniqueInput!]!): [Home]
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput!, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput!): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(where: LocationWhereUniqueInput!, data: LocationUpdateInput!): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createLocationLanding(data: LocationLandingCreateInput!): LocationLanding
  createLocationLandings(data: [LocationLandingCreateInput!]!): [LocationLanding]
  updateLocationLanding(where: LocationLandingWhereUniqueInput!, data: LocationLandingUpdateInput!): LocationLanding
  updateLocationLandings(data: [LocationLandingUpdateArgs!]!): [LocationLanding]
  deleteLocationLanding(where: LocationLandingWhereUniqueInput!): LocationLanding
  deleteLocationLandings(where: [LocationLandingWhereUniqueInput!]!): [LocationLanding]
  createProvider(data: ProviderCreateInput!): Provider
  createProviders(data: [ProviderCreateInput!]!): [Provider]
  updateProvider(where: ProviderWhereUniqueInput!, data: ProviderUpdateInput!): Provider
  updateProviders(data: [ProviderUpdateArgs!]!): [Provider]
  deleteProvider(where: ProviderWhereUniqueInput!): Provider
  deleteProviders(where: [ProviderWhereUniqueInput!]!): [Provider]
  createProvidersLanding(data: ProvidersLandingCreateInput!): ProvidersLanding
  createProvidersLandings(data: [ProvidersLandingCreateInput!]!): [ProvidersLanding]
  updateProvidersLanding(where: ProvidersLandingWhereUniqueInput!, data: ProvidersLandingUpdateInput!): ProvidersLanding
  updateProvidersLandings(data: [ProvidersLandingUpdateArgs!]!): [ProvidersLanding]
  deleteProvidersLanding(where: ProvidersLandingWhereUniqueInput!): ProvidersLanding
  deleteProvidersLandings(where: [ProvidersLandingWhereUniqueInput!]!): [ProvidersLanding]
  createAppointmentsPage(data: AppointmentsPageCreateInput!): AppointmentsPage
  createAppointmentsPages(data: [AppointmentsPageCreateInput!]!): [AppointmentsPage]
  updateAppointmentsPage(where: AppointmentsPageWhereUniqueInput!, data: AppointmentsPageUpdateInput!): AppointmentsPage
  updateAppointmentsPages(data: [AppointmentsPageUpdateArgs!]!): [AppointmentsPage]
  deleteAppointmentsPage(where: AppointmentsPageWhereUniqueInput!): AppointmentsPage
  deleteAppointmentsPages(where: [AppointmentsPageWhereUniqueInput!]!): [AppointmentsPage]
  createGlobalSetting(data: GlobalSettingCreateInput!): GlobalSetting
  createGlobalSettings(data: [GlobalSettingCreateInput!]!): [GlobalSetting]
  updateGlobalSetting(where: GlobalSettingWhereUniqueInput!, data: GlobalSettingUpdateInput!): GlobalSetting
  updateGlobalSettings(data: [GlobalSettingUpdateArgs!]!): [GlobalSetting]
  deleteGlobalSetting(where: GlobalSettingWhereUniqueInput!): GlobalSetting
  deleteGlobalSettings(where: [GlobalSettingWhereUniqueInput!]!): [GlobalSetting]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  condition(where: ConditionWhereUniqueInput!): Condition
  conditions(where: ConditionWhereInput! = {}, orderBy: [ConditionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionWhereUniqueInput): [Condition!]
  conditionsCount(where: ConditionWhereInput! = {}): Int
  servicesLanding(where: ServicesLandingWhereUniqueInput!): ServicesLanding
  servicesLandings(where: ServicesLandingWhereInput! = {}, orderBy: [ServicesLandingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServicesLandingWhereUniqueInput): [ServicesLanding!]
  servicesLandingsCount(where: ServicesLandingWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  blogLanding(where: BlogLandingWhereUniqueInput!): BlogLanding
  blogLandings(where: BlogLandingWhereInput! = {}, orderBy: [BlogLandingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlogLandingWhereUniqueInput): [BlogLanding!]
  blogLandingsCount(where: BlogLandingWhereInput! = {}): Int
  testimonial(where: TestimonialWhereUniqueInput!): Testimonial
  testimonials(where: TestimonialWhereInput! = {}, orderBy: [TestimonialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TestimonialWhereUniqueInput): [Testimonial!]
  testimonialsCount(where: TestimonialWhereInput! = {}): Int
  home(where: HomeWhereUniqueInput!): Home
  homes(where: HomeWhereInput! = {}, orderBy: [HomeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HomeWhereUniqueInput): [Home!]
  homesCount(where: HomeWhereInput! = {}): Int
  about(where: AboutWhereUniqueInput!): About
  abouts(where: AboutWhereInput! = {}, orderBy: [AboutOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutWhereUniqueInput): [About!]
  aboutsCount(where: AboutWhereInput! = {}): Int
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  locationLanding(where: LocationLandingWhereUniqueInput!): LocationLanding
  locationLandings(where: LocationLandingWhereInput! = {}, orderBy: [LocationLandingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationLandingWhereUniqueInput): [LocationLanding!]
  locationLandingsCount(where: LocationLandingWhereInput! = {}): Int
  provider(where: ProviderWhereUniqueInput!): Provider
  providers(where: ProviderWhereInput! = {}, orderBy: [ProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderWhereUniqueInput): [Provider!]
  providersCount(where: ProviderWhereInput! = {}): Int
  providersLanding(where: ProvidersLandingWhereUniqueInput!): ProvidersLanding
  providersLandings(where: ProvidersLandingWhereInput! = {}, orderBy: [ProvidersLandingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProvidersLandingWhereUniqueInput): [ProvidersLanding!]
  providersLandingsCount(where: ProvidersLandingWhereInput! = {}): Int
  appointmentsPage(where: AppointmentsPageWhereUniqueInput!): AppointmentsPage
  appointmentsPages(where: AppointmentsPageWhereInput! = {}, orderBy: [AppointmentsPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AppointmentsPageWhereUniqueInput): [AppointmentsPage!]
  appointmentsPagesCount(where: AppointmentsPageWhereInput! = {}): Int
  globalSetting(where: GlobalSettingWhereUniqueInput!): GlobalSetting
  globalSettings(where: GlobalSettingWhereInput! = {}, orderBy: [GlobalSettingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GlobalSettingWhereUniqueInput): [GlobalSetting!]
  globalSettingsCount(where: GlobalSettingWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
